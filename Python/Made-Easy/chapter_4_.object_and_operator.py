"""objects_and_operators."""

# +
# Чтобы получить список ключевых слов, можно запустить вот такой код,
# который и выведет список ключевых слов.
import keyword

print(keyword.kwlist)
# -

# <p> В этой главе основное внимание уделено базовой семантике языка Python.</p>
# <p> В семантику языка входит не написание, а значение операторов. В этой главе рассматривается семантика переменных и объектов. Они предназначены для хранения, обращения и работы с данными в скрипте Python.</p>

# ### 4.1 . Переменные
# <p> Переменные в Python - это просто указатели. Сами по себе они не имеют значений, а просто указывают на объект, который им присвоен. Технически переменные - это просто области в памяти вашего компьютера, в которых хранится некоторая
# информация. Значения переменных, как следует из самого слова «переменная», могут меняться. То есть вы можете хранить что угодно в переменной.</p>
# <p> Python автоматически определяет, какой тип значения вы присваиваете переменной. Самим вам не нужно определять или указывать типы переменных. Достаточно придумать имя переменной и присвоить ей значение, а Python автоматически определит ее тип.</p>
# <dl>
# <dt> In:</dt>
# <dd>print (type (x) )</dd>
# <dd> print (type (у) )</dd>
# <dt> Out: </dt>
# <dd> class ' int '</dd>
# <dd> class ' str '</dd>
# </dl>

x_ = 5
y_ = "hello"
print(type(x_))
print(type(y_))

# #### 4.1.1. Оператор присваивания.
# <p>Когда мы вводим переменную вида х = 38, то в этой записи</p>
#
# |имя переменной|оператор присваивания|присвоенное значение|
# |:-:|:-:|:-:|
# |х|=|38|
#
# <p>Здесь, в отличие от арифметики, знак (=) не означает «равно». Он означает «присвоить». В Python «равно» записывается как ==.</p>
#
# #### 4.1.2. Имена переменных.
# <p>В предыдущей главе мы уже касались вопроса о том, как можно назвать переменную.</p>
#
# __Любое нарушение правил наименования переменных может привести к синтаксической ошибке при запуске кода.__
#
# 1. Имена переменных могут содержать только буквы, цифры и нижние подчеркивания.
# 2. Несмотря на то что числа использовать можно, имя не должно начинаться с числа. Имя S fingers недопустимо.
# 3. В имени нельзя использовать пробелы. Имя sales data недопустимо. Зато можно написать sales data.
# 4. Имена чувствительны к регистру. Sales и sales - это две разные переменные.
# 5. Наконец, имена переменных не могут совпадать с ключевыми словами. Эrо зарезервированные слова, которые для интерпретатора Python имеют особый смысл.
#
# __Чтобы получить список ключевых слов, можно запустить вот такой код, который и выведет список ключевых слов.__
# - import keyword
# - print(keyword.kwlist)

# ### 4.2. Структура программы.
#
# <p>В программе на Python можно выделить такие части, как модули, выражения, операторы и объекты.</p>
#
# - Программы состоят из модулей.
# - Модули содержат выражения.
# - Выражения содержат операторы.
# - Операторы создают и обрабатывают объекты.
#
# <p>Итак, модули находятся на вершине иерархии программы, а объекты составляют ее основу.</p>
# <p>Начнем снизу. Давайте рассмотрим встроенные объекты и выражения, с помощью которых можно работать с этими объектами.</p>

# ### 4.3. Объекты
# <p>В Python мы выполняем операции над объектами.</p>
# <p>Примерами простых операций являются сложение, умножение чисел (как объектов) или конкатенация строк (как объектов).</p>
# <p>В Python все данные становятся объектами. </p>
# <p>Объекты могут быть либо встроенными, которые есть в Python изначально, либо мы создаем их сами с помощью классов
# Python.</p>
# <p>Для понимания того, что такое объект, нам пока будет достаточно знать, что это просто «фрагмент памяти», содержащий значение, а также некоторые связанные с объектом операции. </p>
# <p>В Python все является объектом, будь то простые числа или выполняемые над ними операции. Для скрипта Python все эти вещи являются объектами.</p>
# <p>Python поддерживает ООП, т. е. объектно-ориентированное программирование.</p>
# <p>Важной характеристикой языка Python является то, что его объектная модель очень последовательна. Каждая структура  данных, число, строка, класс, функция, модуль и т. д. в интерпретаторе Python существуют в своем собственном «контейнере», который называется объектом Python. </p>
# <p>Каждый объект имеет связанный с ним тип (например, целое число, строка и т. д.) и его данные. На практике это делает язык очень гибким, поскольку даже с функциями можно обращаться так же, как и с любым другим объектом.</p>

# #### 4.3. 1 . Классификация объектов
#
# __Объекты делятся по типу данных на:__
# - встроенные;
# - пользовательские.
#
# __Типы данных также бывают:__
# - изменяемые;
# - неизменяемые.
#
# Встроенные типы данных, их примеры, а также указано, изменяемые они или нет.
# |Тип объекта|Примеры объектов|Изменяемый или неизменяемый|
# |:-|:-:|:-:|
# |Числа|1234, 3 . 1 4 1 5, 3+4j , OЫ l l , Decimal ( ) , Fraction ( ) |Неизменяемый|
# |Строки|'nilabh' , "Bob ' s "| Неизменяемый|
# |Списки|[1, [2, 'three'], 4.5], list(range(lO)) |Изменяемый|
# |Словари|{'food' : 'spam', 'taste' : 'yum'} , dict(hours:10)|Изменяемый|
# |Кортежи|(1, 'spam', 4, 'U'), tuple('spam') |Неизменяемый|
# |Множества |set ( ' аЬс ' ) , { ' а ' , ' Ь ' , ' с ' } |Изменяемый|
# |Логический тип|О, 1|Неизменяемый|
# |Компоненты программы| Функции, модули, классы||
